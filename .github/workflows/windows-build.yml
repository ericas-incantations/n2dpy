name: Windows GUI Packaging

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip downloads
        uses: actions/cache@v3
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', 'pyproject.toml', 'pysidedeploy.json') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install build dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install -e .
          python -m pip install -r normal2disp/gui/requirements.txt
          python -m pip install PySide6==6.7.2 pyside6-deploy==6.7.2 ruff pytest

      - name: Lint and test (headless)
        shell: pwsh
        env:
          QT_QPA_PLATFORM: offscreen
        run: |
          python -m ruff check .
          python -m pytest

      - name: Determine version
        id: version
        shell: pwsh
        run: |
          $ref = "${{ github.ref }}".Split('/')[-1]
          if ('${{ github.ref_type }}' -eq 'tag') {
            if ($ref.StartsWith('v')) {
              $ref = $ref.Substring(1)
            }
          } else {
            $ref = "0.0.0-dev"
          }
          "version=$ref" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Build Windows bundle
        shell: pwsh
        run: |
          $version = "${{ steps.version.outputs.version }}"
          if (-not $version) {
            throw "Could not determine version from ref."
          }
          ./packaging/windows/build.ps1 -Configuration Release -Version $version

      - name: Install Inno Setup
        shell: pwsh
        run: choco install innosetup -y

      - name: Optional code signing (bundle exe)
        if: env.N2D_CODESIGN_PFX_PATH != '' && env.N2D_CODESIGN_PFX_PASSWORD != ''
        shell: pwsh
        run: |
          $version = "${{ steps.version.outputs.version }}"
          $exePath = "dist\windows\$version\bundle\normal2disp-gui.exe"
          if (Test-Path $exePath) {
            if (-not (Get-Command signtool.exe -ErrorAction SilentlyContinue)) {
              Write-Warning "signtool.exe not found; skipping signing."
              exit 0
            }
            $arguments = @("sign", "/fd", "SHA256", "/f", "$env:N2D_CODESIGN_PFX_PATH", "/p", "$env:N2D_CODESIGN_PFX_PASSWORD")
            if ($env:N2D_CODESIGN_TIMESTAMP_URL) {
              $arguments += "/tr"
              $arguments += $env:N2D_CODESIGN_TIMESTAMP_URL
              $arguments += "/td"
              $arguments += "SHA256"
            }
            $arguments += $exePath
            & signtool.exe @arguments
          } else {
            Write-Warning "Bundle executable not found at $exePath."
          }

      - name: Build installer
        shell: pwsh
        run: |
          $version = "${{ steps.version.outputs.version }}"
          $iss = "packaging/windows/installer.iss"
          $args = @("/DMyAppVersion=$version")
          if ($env:N2D_CODESIGN_PFX_PATH -and $env:N2D_CODESIGN_PFX_PASSWORD) {
            $args += "/DSign=1"
          }
          & "C:\\Program Files (x86)\\Inno Setup 6\\ISCC.exe" $iss @args

      - name: Upload bundle artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-bundle-${{ steps.version.outputs.version }}
          path: dist/windows/${{ steps.version.outputs.version }}/bundle

      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer-${{ steps.version.outputs.version }}
          path: dist/windows/${{ steps.version.outputs.version }}/installer
